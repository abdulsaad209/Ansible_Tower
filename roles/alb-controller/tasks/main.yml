---
- name: Ensure ~/.local/bin exists
  file:
    path: "{{ lookup('env', 'HOME') }}/.local/bin"
    state: directory
    mode: '0755'

- name: Add ~/.local/bin to PATH (for session)
  set_fact:
    path_with_local_bin: "{{ lookup('env', 'HOME') }}/.local/bin:{{ lookup('env', 'PATH') }}"

- name: Install eksctl to ~/.local/bin
  shell: |
    curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
    mv /tmp/eksctl {{ lookup('env', 'HOME') }}/.local/bin/
  args:
    creates: "{{ lookup('env', 'HOME') }}/.local/bin/eksctl"
  environment:
    PATH: "{{ path_with_local_bin }}"

- name: Install helm to ~/.local/bin manually
  shell: |
    HELM_VERSION=$(curl -s https://api.github.com/repos/helm/helm/releases/latest | jq -r .tag_name)
    curl -Lo helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz
    tar -xzf helm.tar.gz
    mv linux-amd64/helm {{ lookup('env', 'HOME') }}/.local/bin/helm
    rm -rf linux-amd64 helm.tar.gz
  args:
    creates: "{{ lookup('env', 'HOME') }}/.local/bin/helm"
  environment:
    PATH: "{{ path_with_local_bin }}"

- name: Ensure jq is installed
  package:
    name: jq
    state: present

- name: Get OIDC ID
  shell: |
    aws eks describe-cluster --name {{ cluster_name }} --query "cluster.identity.oidc.issuer" --output text | cut -d '/' -f 5
  register: oidc_id
  environment:
    PATH: "{{ path_with_local_bin }}"

- name: Check if OIDC provider is associated
  shell: |
    aws iam list-open-id-connect-providers | grep {{ oidc_id.stdout }}
  register: oidc_check
  ignore_errors: true
  environment:
    PATH: "{{ path_with_local_bin }}"

- name: Associate OIDC if not exists
  shell: |
    {{ lookup('env', 'HOME') }}/.local/bin/eksctl utils associate-iam-oidc-provider --cluster {{ cluster_name }} --approve
  when: oidc_check.rc != 0
  environment:
    PATH: "{{ path_with_local_bin }}"

- name: Download IAM policy
  get_url:
    url: https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.11.0/docs/install/iam_policy.json
    dest: /tmp/iam_policy.json

- name: Create IAM Policy
  shell: |
    aws iam create-policy \
      --policy-name AWSLoadBalancerControllerIAMPolicy \
      --policy-document file:///tmp/iam_policy.json
  register: create_policy
  failed_when: "'EntityAlreadyExists' not in create_policy.stderr and create_policy.rc != 0"
  environment:
    PATH: "{{ path_with_local_bin }}"

- name: Create IAM Role for ALB Controller
  shell: |
    {{ lookup('env', 'HOME') }}/.local/bin/eksctl create iamserviceaccount \
      --cluster={{ cluster_name }} \
      --namespace=kube-system \
      --name=aws-load-balancer-controller \
      --role-name AmazonEKSLoadBalancerControllerRole \
      --attach-policy-arn=arn:aws:iam::{{ aws_account_id }}:policy/AWSLoadBalancerControllerIAMPolicy \
      --approve \
      --region={{ region }}
  register: create_iam_sa
  failed_when: "'ResourceInUseException' not in create_iam_sa.stderr and create_iam_sa.rc != 0"
  environment:
    PATH: "{{ path_with_local_bin }}"

- name: Add Helm repo for ALB controller
  shell: |
    helm repo add eks https://aws.github.io/eks-charts
  args:
    creates: "{{ lookup('env', 'HOME') }}/.cache/helm/repository/eks-index.yaml"
  environment:
    PATH: "{{ path_with_local_bin }}"

- name: Update Helm repos
  shell: helm repo update
  environment:
    PATH: "{{ path_with_local_bin }}"

- name: Install AWS Load Balancer Controller via Helm
  shell: |
    helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
      -n kube-system \
      --set clusterName={{ cluster_name }} \
      --set serviceAccount.create=false \
      --set serviceAccount.name=aws-load-balancer-controller \
      --set region={{ region }} \
      --set vpcId={{ vpc_id }}
  environment:
    KUBECONFIG: "{{ kubeconfig_decoded_path }}"
    PATH: "{{ path_with_local_bin }}"
