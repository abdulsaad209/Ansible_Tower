---
- name: Get OIDC ID from EKS cluster
  shell: >
    aws eks describe-cluster
    --name {{ cluster_name }}
    --region {{ region }}
    --query "cluster.identity.oidc.issuer"
    --output text | cut -d '/' -f 5
  register: oidc_id_output

- name: Set OIDC ID fact
  set_fact:
    oidc_id: "{{ oidc_id_output.stdout }}"

- name: Associate IAM OIDC provider
  command: >
    eksctl utils associate-iam-oidc-provider
    --cluster {{ cluster_name }}
    --approve
  environment:
    AWS_REGION: "{{ region }}"

- name: Download IAM policy for ALB controller
  get_url:
    url: https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.11.0/docs/install/iam_policy.json
    dest: /tmp/iam_policy.json

- name: Create IAM Policy
  command: >
    aws iam create-policy
    --policy-name AWSLoadBalancerControllerIAMPolicy
    --policy-document file:///tmp/iam_policy.json
  register: create_policy_output
  failed_when: false
  changed_when: "'policy' in create_policy_output.stdout"

- name: Create IAM Service Account with eksctl
  command: >
    eksctl create iamserviceaccount
    --cluster={{ cluster_name }}
    --namespace=kube-system
    --name=aws-load-balancer-controller
    --role-name=AmazonEKSLoadBalancerControllerRole
    --attach-policy-arn=arn:aws:iam::{{ aws_account_id }}:policy/AWSLoadBalancerControllerIAMPolicy
    --override-existing-serviceaccounts
    --approve
  environment:
    AWS_REGION: "{{ region }}"

- name: Add Helm repo for ALB Controller
  command: helm repo add eks https://aws.github.io/eks-charts
  register: helm_add
  changed_when: "'has been added' in helm_add.stdout or 'already exists' not in helm_add.stdout"

- name: Update Helm repo
  command: helm repo update

- name: Uninstall Helm Chart if it exists 
  command: helm uninstall aws-load-balancer-controller -n kube-system || true
  ignore_errors: true

- name: Install AWS ALB Load Balancer Controller
  command: >
    helm install aws-load-balancer-controller eks/aws-load-balancer-controller
    -n kube-system
    --set clusterName={{ cluster_name }}
    --set serviceAccount.create=false
    --set serviceAccount.name=aws-load-balancer-controller
    --set region={{ region }}
    --set vpcId={{ vpc_id }}
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  ignore_errors: true

# - name: Wait for aws-load-balancer-controller deployment
#   kubernetes.core.k8s_info:
#     kind: Deployment
#     namespace: kube-system
#     name: aws-load-balancer-controller
#     kubeconfig: "{{ kubeconfig_path }}"
#   register: alb_deploy_status
#   retries: 10
#   delay: 15
#   until: alb_deploy_status.resources[0].status.readyReplicas > 0

##################################################################
# PATCH ARGOCD-SERVER DEPLOYMENT FOR INGRESS USE
##################################################################

- name: Patch ArgoCD server with custom args
  kubernetes.core.k8s_json_patch:
    api_version: apps/v1
    kind: Deployment
    name: argocd-server
    namespace: argocd
    patch:
      - op: add
        path: /spec/template/spec/containers/0/args
        value:
          - argocd-server
          - --insecure
    kubeconfig: "{{ kubeconfig_path }}"

##################################################################
# APPLY INGRESS MANIFEST
##################################################################

- name: Apply ArgoCD ingress resource
  kubernetes.core.k8s:
    state: present
    src: "{{ role_path }}/files/ingress-argocd.yml"
    kubeconfig: "{{ kubeconfig_path }}"

- name: Wait for ingress to be created
  pause:
    seconds: 15

- name: Get ArgoCD ingress
  kubernetes.core.k8s_info:
    kind: Ingress
    namespace: argocd
    name: argocd-ingress
    kubeconfig: "{{ kubeconfig_path }}"
  register: argocd_ingress_info

- name: Extract ALB hostname from ingress
  set_fact:
    alb_hostname: "{{ argocd_ingress_info.resources[0].status.loadBalancer.ingress[0].hostname }}"

- name: Perform nslookup to get public IP
  command: "nslookup {{ alb_hostname }}"
  register: nslookup_output

- name: Extract public IP from nslookup
  set_fact:
    alb_public_ip: "{{ nslookup_output.stdout | regex_search('Address: (.*)', '\\1') | trim }}"

- name: Save ALB public IP to file
  copy:
    content: "{{ alb_public_ip }}"
    dest: "{{ lookup('env', 'CI_PROJECT_DIR') }}/kubernetes/alb-public-ip.txt"
