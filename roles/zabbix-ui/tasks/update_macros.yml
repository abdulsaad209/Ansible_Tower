# ---------------------------------------------------------
# 1️⃣ Get existing host macro ID
- name: Get existing host macro
  uri:
    url: "{{ zabbix_url }}/api_jsonrpc.php"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
      Authorization: "Bearer {{ zbx_token }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "usermacro.get"
      params:
        host: "{{ inventory_hostname }}"
        filter:
          macro: "{$KUBE.KUBELET.URL}"
        output: ["hostmacroid", "macro", "value"]
      id: 1
    validate_certs: false
  register: macro_query_response

# ---------------------------------------------------------
# 2️⃣ Extract macro ID
- name: Set macro ID fact
  set_fact:
    existing_macro_id: "{{ macro_query_response.json.result[0].hostmacroid | default('') }}"

- debug:
    msg: "Resolved macro ID: {{ existing_macro_id }}"

# ---------------------------------------------------------
# 3️⃣ Update or create macro
- name: Update host macro if it exists, else create it
  uri:
    url: "{{ zabbix_url }}/api_jsonrpc.php"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
      Authorization: "Bearer {{ zbx_token }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "{{ 'usermacro.update' if existing_macro_id != '' else 'usermacro.create' }}"
      params: >-
        {% if existing_macro_id != '' %}
        {
          "hostmacroid": "{{ existing_macro_id }}",
          "value": "http://{{ host_ip }}:10250/metrics"
        }
        {% else %}
        {
          "hostid": "{{ existing_host_id }}",
          "macro": "{$KUBE.KUBELET.URL}",
          "value": "http://{{ host_ip }}:10250/metrics"
        }
        {% endif %}
      id: 2
    validate_certs: false
  register: macro_update_response

- debug:
    msg: "Macro operation result → {{ macro_update_response.json }}"
